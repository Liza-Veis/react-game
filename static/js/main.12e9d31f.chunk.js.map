{"version":3,"sources":["AppConstants/index.ts","AppConstants/constants.ts","assets/images/rs-logo.svg","components/Footer.tsx","redux/chessActions/chessActionsTypes.ts","redux/chessActions/index.ts","components/Home/Home.tsx","components/Game/components/Square.tsx","components/Game/components/Piece.tsx","utils.ts","components/Game/components/Promotion.tsx","components/Game/components/GameOver.tsx","components/Game/components/Board.tsx","AI/index.ts","AI/sendMessage.ts","hooks/useHotkeys.ts","components/Game/Game.tsx","components/Settings/components/inputs/RadioInput.tsx","components/Settings/components/AiSettings.tsx","components/Settings/components/inputs/RangeInput.tsx","components/Settings/components/AudioSettings.tsx","components/Settings/components/FullscreenSettings.tsx","components/Settings/components/ModeSettings.tsx","components/Settings/components/TwoPlayersSettings.tsx","components/Settings/Settings.tsx","hooks/useFullscreen.ts","components/Statistics/Statistics.tsx","components/HotKeys/HotKeys.tsx","App.tsx","reportWebVitals.ts","assets/audio/move.wav","assets/audio/music.mp3","redux/setup.ts","redux/chessReducer.ts","redux/store.ts","AI/handleMessage.ts","index.tsx"],"names":["DEFAULT_VIEW","DEFAULT_SIDE","DEFAULT_MODE","DEFAULT_SOUND","DEFAULT_MUSIC","Footer","className","href","src","logo","alt","SELECT_SQUARE","MOVE_PIECE","MAKE_AI_MOVE","PROMOTE_PAWN","START_GAME","SURRENDER","UNDO","SET_VIEW","SET_SIDE","SET_MODE","SET_MUSIC","SET_SOUND","setMusic","value","type","payload","setSound","connect","dispatch","startNewGame","onClick","to","Square","props","children","isDark","handleClick","isLastMove","isPossibleSquare","isCapturedSquare","possibleMovesShown","lastMoveShown","Piece","piece","isSelected","turn","mode","side","color","title","toUpperCase","img","interactiveClass","getXY","idx","isReversed","x","Math","abs","y","floor","isDarkSquare","getPosition","getIndex","position","file","indexOf","getRandomSide","round","random","promote","data","promotePawn","map","promotion","from","state","result","board","selectedSquare","isGameOver","actualSide","isSurrender","lastMove","possibleMoves","posibleMoves","capturedMoves","selectSquare","movePiece","useState","isShownGameOver","setIsShownGameOver","useEffect","timeout","setTimeout","clearTimeout","targetPiece","includes","stockfish","Worker","postMessage","generateAIMove","fen","useHotkeys","code","callback","handleKeydown","useCallback","e","document","addEventListener","removeEventListener","surrender","undo","undoFn","surrenderFn","isLastMoveShown","setIsLastMoveShown","isPossibleMovesShown","setIsPossibleMovesShown","moveTimeout","setMoveTimeout","handleUndo","RadioInput","name","checked","label","defaultChecked","AiSettings","handleChange","onChange","RangeInput","min","max","step","defaultValue","AudioSettings","music","sound","FullscreenSettings","fullscreen","isFullscreen","setIsFullscreen","isChecked","setIsChecked","htmlFor","id","ModeSettings","TwoPlayersSettings","view","setSide","setView","setMode","target","useFullscreen","elRef","fullscreenElement","useLayoutEffect","onfullscreenchange","current","exitFullscreen","then","requestFullscreen","statistics","headers","header","row","i","toString","HotKeys","AppRef","useRef","ref","exact","path","component","Home","Game","Statistics","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","getStoredItem","localStorage","getItem","statisticsJSON","JSON","parse","settingsJSON","storeItem","settings","newSettings","setItem","stringify","startSettings","undefined","audio","move","Audio","moveSound","loop","chess","Chess","saveToStatistics","statisticsField","date","Date","toLocaleString","month","day","hour","minute","unshift","slice","getBoard","flat","reverse","getResults","in_checkmate","winner","in_draw","reason","in_stalemate","in_threefold_repetition","insufficient_material","window","location","pathname","initialState","chessReducer","action","reset","boardProps","isReversedBoard","moves","square","verbose","forEach","captured","push","promotions","filter","m","length","play","catch","isLegal","game_over","history","volume","paused","pause","store","createStore","handleMessage","split","onmessage","ReactDOM","render","StrictMode","basename","process","getElementById"],"mappings":"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","file":"static/js/main.12e9d31f.chunk.js","sourcesContent":["export * from './constants';\nexport * from './types';\n","export const DEFAULT_VIEW = 'fixed';\nexport const DEFAULT_SIDE = 'random';\nexport const DEFAULT_MODE = 'with-AI';\nexport const DEFAULT_SOUND = 0.5;\nexport const DEFAULT_MUSIC = 0;\n","export default __webpack_public_path__ + \"static/media/rs-logo.ad178c0d.svg\";","import React from 'react';\nimport logo from '../assets/images/rs-logo.svg';\n\nconst Footer: React.FC = () => {\n  return (\n    <footer className=\"footer\">\n      <a className=\"footer__logo\" href=\"https://rs.school/react/\">\n        <img src={logo} alt=\"RS-School\" />\n      </a>\n      <span className=\"footer__copy\">\n        Made by <a href=\"https://github.com/Liza-Veis\">@Liza-Veis</a> in 2021\n      </span>\n    </footer>\n  );\n};\n\nexport default Footer;\n","export const SELECT_SQUARE = 'SELECT_SQUARE';\nexport const MOVE_PIECE = 'MOVE_PIECE';\nexport const MAKE_AI_MOVE = 'MAKE_AI_MOVE';\nexport const PROMOTE_PAWN = 'PROMOTE_PAWN';\nexport const START_GAME = 'START_GAME';\nexport const SURRENDER = 'SURRENDER';\nexport const UNDO = 'UNDO';\nexport const SET_VIEW = 'SET_VIEW';\nexport const SET_SIDE = 'SET_SIDE';\nexport const SET_MODE = 'SET_MODE';\nexport const SET_MUSIC = 'SET_MUSIC';\nexport const SET_SOUND = 'SET_SOUND';\n","import { TMode, TPromotion, TSide, TView } from '../../AppConstants';\nimport {\n  IMakeAIMove,\n  IMovePiece,\n  IPromotePawn,\n  ISelectSquare,\n  ISetMode,\n  ISetMusic,\n  ISetSide,\n  ISetSound,\n  ISetView,\n  IStartGame,\n  ISurrender,\n  IUndo,\n} from './chessActions.types';\nimport {\n  MAKE_AI_MOVE,\n  MOVE_PIECE,\n  PROMOTE_PAWN,\n  SELECT_SQUARE,\n  SET_MODE,\n  SET_MUSIC,\n  SET_SIDE,\n  SET_SOUND,\n  SET_VIEW,\n  START_GAME,\n  SURRENDER,\n  UNDO,\n} from './chessActionsTypes';\n\nexport const selectSquare = (idx: number): ISelectSquare => {\n  return {\n    type: SELECT_SQUARE,\n    payload: idx,\n  };\n};\n\nexport const movePiece = (idx: number): IMovePiece => {\n  return {\n    type: MOVE_PIECE,\n    payload: idx,\n  };\n};\n\nexport const promotePawn = (data: TPromotion): IPromotePawn => {\n  return {\n    type: PROMOTE_PAWN,\n    payload: data,\n  };\n};\n\nexport const makeAIMove = (data: {\n  from: string;\n  to: string;\n  promotion: string | undefined;\n}): IMakeAIMove => {\n  return {\n    type: MAKE_AI_MOVE,\n    payload: data,\n  };\n};\n\nexport const startGame = (): IStartGame => {\n  return {\n    type: START_GAME,\n  };\n};\n\nexport const setView = (value: TView): ISetView => {\n  return {\n    type: SET_VIEW,\n    payload: value,\n  };\n};\n\nexport const setSide = (value: TSide): ISetSide => {\n  return {\n    type: SET_SIDE,\n    payload: value,\n  };\n};\n\nexport const setMode = (value: TMode): ISetMode => {\n  return {\n    type: SET_MODE,\n    payload: value,\n  };\n};\n\nexport const setMusic = (value: number): ISetMusic => {\n  return {\n    type: SET_MUSIC,\n    payload: value,\n  };\n};\n\nexport const setSound = (value: number): ISetSound => {\n  return {\n    type: SET_SOUND,\n    payload: value,\n  };\n};\n\nexport const surrender = (): ISurrender => {\n  return {\n    type: SURRENDER,\n  };\n};\n\nexport const undo = (): IUndo => {\n  return {\n    type: UNDO,\n  };\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { startGame } from '../../redux/chessActions';\nimport { TDispatch } from '../../redux/types';\n\ntype Props = {\n  startNewGame: () => void;\n};\n\nconst Home: React.FC<Props> = ({ startNewGame }: Props) => {\n  return (\n    <div className=\"main\">\n      <NavLink className=\"btn\" onClick={startNewGame} to=\"/game\">\n        New Game\n      </NavLink>\n      <NavLink className=\"btn\" to=\"/settings\">\n        Settings\n      </NavLink>\n      <NavLink className=\"btn\" to=\"/statistics\">\n        Statistics\n      </NavLink>\n      <NavLink className=\"btn\" to=\"/hotkeys\">\n        Hot keys\n      </NavLink>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: TDispatch) => {\n  return {\n    startNewGame: () => dispatch(startGame()),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Home);\n","import React from 'react';\n\ntype Props = {\n  isDark: boolean;\n  isLastMove: boolean | null;\n  children: React.ReactNode;\n  isPossibleSquare: boolean | null;\n  isCapturedSquare: boolean | null;\n  lastMoveShown: boolean;\n  possibleMovesShown: boolean;\n  handleClick: () => void;\n};\n\nconst Square: React.FC<Props> = (props: Props) => {\n  const {\n    children,\n    isDark,\n    handleClick,\n    isLastMove,\n    isPossibleSquare,\n    isCapturedSquare,\n    possibleMovesShown,\n    lastMoveShown,\n  } = props;\n\n  let className = 'square';\n  if (isDark) {\n    className += ' square--dark';\n  }\n  if (isLastMove) {\n    className += lastMoveShown ? ' square--last-move' : '';\n  }\n  if (isPossibleSquare) {\n    className += ' interactive';\n    className += possibleMovesShown ? ' square--possible' : '';\n  }\n  if (isCapturedSquare) {\n    className += ' interactive';\n    className += possibleMovesShown ? ' square--captured' : '';\n  }\n  /* eslint-disable jsx-a11y/no-static-element-interactions */\n  /* eslint-disable jsx-a11y/click-events-have-key-events */\n  return (\n    <div className={className} onClick={handleClick}>\n      {children}\n    </div>\n  );\n};\n\nexport default Square;\n","import React from 'react';\nimport { TColor, TMode, TPiece, TSide } from '../../../AppConstants';\n\ntype Props = {\n  piece: TPiece;\n  isSelected: boolean;\n  turn: TColor;\n  mode: TMode;\n  side: TSide;\n};\n\nconst Piece: React.FC<Props> = ({\n  piece,\n  isSelected,\n  turn,\n  mode,\n  side,\n}: Props) => {\n  const { type, color } = piece;\n  const title = `${color}${type.toUpperCase()}`;\n  const img = `./assets/${title}.png`;\n  const selectedClass = isSelected ? 'selected' : '';\n  let interactiveClass = '';\n\n  if (turn === color) {\n    if (mode === 'with-AI') {\n      if (side === color) {\n        interactiveClass = 'interactive';\n      }\n    } else {\n      interactiveClass = 'interactive';\n    }\n  }\n\n  const className = `piece ${selectedClass} ${interactiveClass}`;\n\n  return (\n    <div className={className}>\n      <img src={img} alt={title} />\n    </div>\n  );\n};\n\nexport default Piece;\n","export const getXY = (\n  idx: number,\n  isReversed?: boolean\n): { x: number; y: number } => {\n  const x = !isReversed ? idx % 8 : Math.abs((idx % 8) - 7);\n  const y = !isReversed\n    ? Math.abs(Math.floor(idx / 8) - 7)\n    : Math.floor(idx / 8);\n  return { x, y };\n};\n\nexport const isDarkSquare = (idx: number): boolean => {\n  const { x, y } = getXY(idx);\n  return (x + y) % 2 === 1;\n};\n\nexport const getPosition = (idx: number, isReversed: boolean): string => {\n  const { x, y } = getXY(idx, isReversed);\n  const file = 'abcdefgh'[x];\n  return `${file}${y + 1}`;\n};\n\nexport const getIndex = (position: string, isReversed: boolean): number => {\n  const file = position[0];\n  const y = +position[1] - 1;\n  const x = 'abcdefgh'.indexOf(file);\n  return isReversed ? y * 8 + 7 - x : (7 - y) * 8 + x;\n};\n\nexport const getRandomSide = (): 'w' | 'b' => {\n  return 'wb'[Math.round(Math.random())] as 'w' | 'b';\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { TPendingPromotion, TPromotion } from '../../../AppConstants';\nimport { promotePawn } from '../../../redux/chessActions';\nimport { TDispatch } from '../../../redux/types';\n\ntype Props = {\n  data: TPendingPromotion;\n  promote: (data: TPromotion) => void;\n};\n\nconst Promotion: React.FC<Props> = ({ data, promote }: Props) => {\n  const promotionPieces = ['q', 'n', 'r', 'b'];\n  const color = data?.color;\n\n  const handleClick = (promotion: string) => {\n    if (!data) return;\n    const { from, to } = data;\n    promote({ from, to, promotion });\n  };\n  return (\n    <div className=\"promotion\">\n      <div className=\"promotion__body\">\n        <h2 className=\"promotion__title\">Pawn promotion</h2>\n        <div className=\"promotion__box\">\n          {promotionPieces.map((piece, idx) => {\n            const title = `${color}${piece.toUpperCase()}`;\n            /* eslint-disable jsx-a11y/no-static-element-interactions */\n            /* eslint-disable jsx-a11y/click-events-have-key-events */\n            return (\n              <div\n                key={idx}\n                className=\"promotion__item interactive\"\n                onClick={() => handleClick(piece)}\n              >\n                <img src={`./assets/${title}.png`} alt={title} />\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = (dispatch: TDispatch) => {\n  return {\n    promote: (data: TPromotion) => dispatch(promotePawn(data)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(Promotion);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { TState } from '../../../redux/types';\n\ntype Props = {\n  result: string | null;\n};\n\nconst GameOver: React.FC<Props> = ({ result }: Props) => {\n  return (\n    <div className=\"game-over\">\n      <div className=\"game-over__body\">\n        <h2 className=\"game-over__title\">Game Over</h2>\n        <span className=\"game-over__result\">{result}</span>\n        <NavLink to=\"/\" className=\"btn game-over__btn\">\n          Menu\n        </NavLink>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: TState) => {\n  return {\n    result: state.result,\n  };\n};\n\nexport default connect(mapStateToProps)(GameOver);\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { TDispatch, TState } from '../../../redux/types';\nimport Square from './Square';\nimport Piece from './Piece';\nimport { movePiece, selectSquare } from '../../../redux/chessActions';\nimport { isDarkSquare } from '../../../utils';\nimport Promotion from './Promotion';\nimport GameOver from './GameOver';\nimport {\n  TBoard,\n  TColor,\n  TMode,\n  TPendingPromotion,\n  TPiece,\n  TSide,\n} from '../../../AppConstants';\n\ntype Props = {\n  board: TBoard;\n  selectedSquare: number | null;\n  promotion: TPendingPromotion;\n  turn: TColor;\n  isGameOver: boolean;\n  mode: TMode;\n  side: TSide;\n  isSurrender: boolean;\n  lastMove: [number, number] | null;\n  possibleMoves: number[] | null;\n  capturedMoves: number[] | null;\n  lastMoveShown: boolean;\n  possibleMovesShown: boolean;\n  selectSquare: (idx: number) => void;\n  movePiece: (idx: number) => void;\n};\n\nconst Board: React.FC<Props> = (props: Props) => {\n  const {\n    board,\n    selectedSquare,\n    promotion,\n    turn,\n    isGameOver,\n    mode,\n    side,\n    isSurrender,\n    lastMove,\n    possibleMoves,\n    capturedMoves,\n    lastMoveShown,\n    possibleMovesShown,\n  } = props;\n\n  const [isShownGameOver, setIsShownGameOver] = useState(isGameOver);\n\n  useEffect(() => {\n    const time = isSurrender ? 0 : 1000;\n    const timeout = setTimeout(() => {\n      setIsShownGameOver(isGameOver);\n    }, time);\n    return () => clearTimeout(timeout);\n  }, [isGameOver, isSurrender]);\n\n  const handleClick = (piece: TPiece | null, idx: number) => {\n    if (selectedSquare === idx || (mode === 'with-AI' && turn !== side)) {\n      return;\n    }\n    if (!piece) {\n      props.movePiece(idx);\n      return;\n    }\n    if (piece.color !== turn) {\n      if (selectedSquare) {\n        props.movePiece(idx);\n      }\n      return;\n    }\n\n    const targetPiece = board[idx];\n    if (targetPiece && targetPiece.color === piece.color) {\n      props.selectSquare(idx);\n    } else if (selectedSquare) {\n      props.movePiece(idx);\n    }\n  };\n\n  return (\n    <div className=\"board\">\n      {board.map((piece, idx) => (\n        <Square\n          key={idx}\n          isDark={isDarkSquare(idx)}\n          handleClick={() => handleClick(piece, idx)}\n          isLastMove={lastMove && lastMove.includes(idx)}\n          isPossibleSquare={possibleMoves && possibleMoves.includes(idx)}\n          isCapturedSquare={capturedMoves && capturedMoves.includes(idx)}\n          lastMoveShown={lastMoveShown}\n          possibleMovesShown={possibleMovesShown}\n        >\n          {piece && (\n            <Piece\n              piece={piece}\n              turn={turn}\n              isSelected={selectedSquare === idx}\n              mode={mode}\n              side={side}\n            />\n          )}\n        </Square>\n      ))}\n      {promotion && <Promotion data={promotion} />}\n      {isShownGameOver && <GameOver />}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: TState) => {\n  return {\n    board: state.board,\n    selectedSquare: state.selectedSquare,\n    promotion: state.promotion,\n    turn: state.turn,\n    isGameOver: state.isGameOver,\n    mode: state.mode,\n    side: state.actualSide,\n    isSurrender: state.isSurrender,\n    lastMove: state.lastMove,\n    possibleMoves: state.posibleMoves,\n    capturedMoves: state.capturedMoves,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: TDispatch) => {\n  return {\n    selectSquare: (idx: number) => dispatch(selectSquare(idx)),\n    movePiece: (idx: number) => dispatch(movePiece(idx)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n","const stockfish = new Worker('stockfish.js');\n\nstockfish.postMessage('uci');\nstockfish.postMessage('ucinewgame');\n\nstockfish.postMessage('setoption name MultiPV value 3');\nstockfish.postMessage('setoption name Minimum Thinking Time 500');\n\nexport default stockfish;\n","import stockfish from './index';\n\nexport const generateAIMove = (fen: string): void => {\n  stockfish.postMessage(`position fen ${fen}`);\n  stockfish.postMessage('go wtime 10000 btime 10000 winc 1000 binc 1000');\n};\n\nexport const stopSearching = (): void => {\n  stockfish.postMessage('quit');\n};\n","import { useCallback, useEffect } from 'react';\n\nconst useHotkeys = (code: string, callback: () => void): void => {\n  const handleKeydown = useCallback(\n    (e: KeyboardEvent) => {\n      if (e.code === code) {\n        callback();\n      }\n    },\n    [code, callback]\n  );\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeydown, true);\n    return () => document.removeEventListener('keydown', handleKeydown, true);\n  }, [handleKeydown]);\n};\n\nexport default useHotkeys;\n","import React, { useCallback, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { TDispatch, TState } from '../../redux/types';\nimport Board from './components/Board';\nimport { stopSearching } from '../../AI/sendMessage';\nimport { surrender, undo } from '../../redux/chessActions';\nimport useHotkeys from '../../hooks/useHotkeys';\nimport { TMode } from '../../AppConstants';\n\ntype Props = {\n  isGameOver: boolean;\n  mode: TMode;\n  surrender: () => void;\n  undo: () => void;\n};\n\nconst Game: React.FC<Props> = (props: Props) => {\n  const { isGameOver, mode, undo: undoFn, surrender: surrenderFn } = props;\n\n  const [isLastMoveShown, setIsLastMoveShown] = useState(true);\n  const [isPossibleMovesShown, setIsPossibleMovesShown] = useState(true);\n\n  useHotkeys('KeyH', () => setIsLastMoveShown(!isLastMoveShown));\n  useHotkeys('KeyM', () => setIsPossibleMovesShown(!isPossibleMovesShown));\n\n  const [moveTimeout, setMoveTimeout] = useState<ReturnType<\n    typeof setTimeout\n  > | null>();\n\n  const handleUndo = useCallback(() => {\n    if (moveTimeout) return;\n    undoFn();\n    if (mode === 'with-AI') {\n      const timeout = setTimeout(() => {\n        undoFn();\n        setMoveTimeout(null);\n      }, 800);\n      setMoveTimeout(timeout);\n    }\n  }, [mode, undoFn, moveTimeout]);\n\n  useHotkeys('KeyS', surrenderFn);\n  useHotkeys('KeyU', handleUndo);\n\n  const handleClick = () => {\n    surrenderFn();\n    stopSearching();\n  };\n\n  return (\n    <div className=\"game\">\n      <Board\n        lastMoveShown={isLastMoveShown}\n        possibleMovesShown={isPossibleMovesShown}\n      />\n      {!isGameOver && (\n        <button className=\"btn game__btn\" onClick={handleClick} type=\"button\">\n          Surrender\n        </button>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: TState) => {\n  return {\n    isGameOver: state.isGameOver,\n    mode: state.mode,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: TDispatch) => {\n  return {\n    surrender: () => dispatch(surrender()),\n    undo: () => dispatch(undo()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React from 'react';\n\ntype Props = {\n  name: string;\n  value: string;\n  checked: boolean;\n  label: string;\n};\n\nconst RadioInput: React.FC<Props> = (props: Props) => {\n  const { name, value, checked, label } = props;\n  /* eslint-disable jsx-a11y/label-has-associated-control */\n  return (\n    <label>\n      <input type=\"radio\" name={name} value={value} defaultChecked={checked} />\n      {label}\n    </label>\n  );\n};\n\nexport default RadioInput;\n","import React from 'react';\nimport { TSide } from '../../../AppConstants';\nimport RadioInput from './inputs/RadioInput';\n\ntype Props = {\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  side: TSide;\n};\n\nconst AiSettings: React.FC<Props> = ({ handleChange, side }: Props) => {\n  return (\n    <>\n      <div className=\"settings__item\">\n        <h3 className=\"settings__title\">Side</h3>\n        <div className=\"settings__box\" onChange={handleChange}>\n          <RadioInput\n            name=\"side\"\n            value=\"w\"\n            checked={side === 'w'}\n            label=\"White\"\n          />\n          <RadioInput\n            name=\"side\"\n            value=\"b\"\n            checked={side === 'b'}\n            label=\"Black\"\n          />\n          <RadioInput\n            name=\"side\"\n            value=\"random\"\n            checked={side === 'random'}\n            label=\"Random\"\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default AiSettings;\n","import React from 'react';\n\ntype Props = {\n  name: string;\n  value: number;\n  label: string;\n};\n\nconst RangeInput: React.FC<Props> = ({ name, value, label }: Props) => {\n  /* eslint-disable jsx-a11y/label-has-associated-control */\n  return (\n    <label>\n      {label}\n      <input\n        type=\"range\"\n        name={name}\n        min=\"0\"\n        max=\"1\"\n        step=\"0.1\"\n        defaultValue={value}\n      />\n    </label>\n  );\n};\n\nexport default RangeInput;\n","import React from 'react';\nimport RangeInput from './inputs/RangeInput';\n\ntype Props = {\n  music: number;\n  sound: number;\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst AudioSettings: React.FC<Props> = (props: Props) => {\n  const { handleChange, music, sound } = props;\n\n  return (\n    <div className=\"settings__item audio\">\n      <h3 className=\"settings__title\">Audio</h3>\n      <div className=\"settings__box\" onChange={handleChange}>\n        <RangeInput name=\"music\" value={music} label=\"Music:\" />\n        <RangeInput name=\"sound\" value={sound} label=\"Sound:\" />\n      </div>\n    </div>\n  );\n};\n\nexport default AudioSettings;\n","import React, { useState } from 'react';\n\ntype Props = {\n  fullscreen: [boolean, () => void];\n};\n\nconst FullscreenSettings: React.FC<Props> = ({ fullscreen }: Props) => {\n  const [isFullscreen, setIsFullscreen] = fullscreen;\n  const [isChecked, setIsChecked] = useState(isFullscreen);\n\n  const handleClick = () => {\n    setIsChecked(!isChecked);\n    if (isFullscreen === isChecked) {\n      setIsFullscreen();\n    }\n  };\n\n  /* eslint-disable jsx-a11y/click-events-have-key-events */\n  /* eslint-disable jsx-a11y/no-static-element-interactions */\n  return (\n    <div className=\"settings__item\">\n      <h3 className=\"settings__title\">Fullscreen</h3>\n      <div className=\"settings__box\">\n        <label htmlFor=\"fullscreen\">\n          <input\n            type=\"radio\"\n            id=\"fullscreen\"\n            onClick={handleClick}\n            defaultChecked={isChecked}\n          />\n          Enable\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default FullscreenSettings;\n","import React from 'react';\nimport { TMode } from '../../../AppConstants';\nimport RadioInput from './inputs/RadioInput';\n\ntype Props = {\n  mode: TMode;\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst ModeSettings: React.FC<Props> = (props: Props) => {\n  const { handleChange, mode } = props;\n\n  return (\n    <div className=\"settings__item\">\n      <h3 className=\"settings__title\">Mode</h3>\n      <div className=\"settings__box\" onChange={handleChange}>\n        <RadioInput\n          name=\"mode\"\n          value=\"with-AI\"\n          checked={mode === 'with-AI'}\n          label=\"With AI\"\n        />\n\n        <RadioInput\n          name=\"mode\"\n          value=\"two-players\"\n          checked={mode === 'two-players'}\n          label=\"Two players\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ModeSettings;\n","import React from 'react';\nimport { TView } from '../../../AppConstants';\nimport RadioInput from './inputs/RadioInput';\n\ntype Props = {\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  view: TView;\n};\n\nconst TwoPlayersSettings: React.FC<Props> = ({ handleChange, view }: Props) => {\n  return (\n    <>\n      <div className=\"settings__item\">\n        <h3 className=\"settings__title\">View</h3>\n        <div className=\"settings__box\" onChange={handleChange}>\n          <RadioInput\n            name=\"view\"\n            value=\"auto-rotate\"\n            checked={view === 'auto-rotate'}\n            label=\"Auto rotate\"\n          />\n          <RadioInput\n            name=\"view\"\n            value=\"fixed\"\n            checked={view === 'fixed'}\n            label=\"Fixed\"\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default TwoPlayersSettings;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { TMode, TSide, TView } from '../../AppConstants';\nimport {\n  setMode,\n  setMusic,\n  setSide,\n  setSound,\n  setView,\n} from '../../redux/chessActions';\nimport { TDispatch, TState } from '../../redux/types';\nimport AiSettings from './components/AiSettings';\nimport AudioSettings from './components/AudioSettings';\nimport FullscreenSettings from './components/FullscreenSettings';\nimport ModeSettings from './components/ModeSettings';\nimport TwoPlayersSettings from './components/TwoPlayersSettings';\n\ntype Props = {\n  side: TSide;\n  view: TView;\n  mode: TMode;\n  sound: number;\n  music: number;\n  fullscreen: [boolean, () => void];\n  setView: (value: TView) => void;\n  setSide: (value: TSide) => void;\n  setMode: (value: TMode) => void;\n  setMusic: (value: number) => void;\n  setSound: (value: number) => void;\n};\n\nconst Settings: React.FC<Props> = (props: Props) => {\n  const { side, view, mode, sound, music, fullscreen } = props;\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    switch (e.target.name) {\n      case 'view': {\n        props.setView(e.target.value as TView);\n        break;\n      }\n      case 'side': {\n        props.setSide(e.target.value as TSide);\n        break;\n      }\n      case 'mode': {\n        props.setMode(e.target.value as TMode);\n        break;\n      }\n      case 'music': {\n        props.setMusic(+e.target.value);\n        break;\n      }\n      case 'sound': {\n        props.setSound(+e.target.value);\n        break;\n      }\n      default: {\n        break;\n      }\n    }\n  };\n\n  return (\n    <div className=\"settings\">\n      <NavLink className=\"btn btn--back\" to=\"/\">\n        Back\n      </NavLink>\n\n      <ModeSettings handleChange={handleChange} mode={mode} />\n      {mode === 'with-AI' && (\n        <AiSettings handleChange={handleChange} side={side} />\n      )}\n      {mode === 'two-players' && (\n        <TwoPlayersSettings handleChange={handleChange} view={view} />\n      )}\n\n      <AudioSettings handleChange={handleChange} music={music} sound={sound} />\n      <FullscreenSettings fullscreen={fullscreen} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: TState) => {\n  return {\n    side: state.side,\n    view: state.view,\n    mode: state.mode,\n    sound: state.sound,\n    music: state.music,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: TDispatch) => {\n  return {\n    setSide: (value: TSide) => dispatch(setSide(value)),\n    setView: (value: TView) => dispatch(setView(value)),\n    setMode: (value: TMode) => dispatch(setMode(value)),\n    setSound: (value: number) => dispatch(setSound(value)),\n    setMusic: (value: number) => dispatch(setMusic(value)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\n","import React, { useLayoutEffect, useState } from 'react';\n\nconst useFullscreen = (\n  elRef: React.RefObject<HTMLElement>\n): [boolean, () => void] => {\n  const [isFullscreen, setIsFullscreen] = useState(\n    document.fullscreenElement !== null\n  );\n\n  const setFullscreen = () => {\n    if (elRef.current === null) return;\n    if (!isFullscreen) {\n      elRef.current\n        .requestFullscreen()\n        .then(() => setIsFullscreen(document.fullscreenElement !== null));\n    } else {\n      document.exitFullscreen().then(() => setIsFullscreen(false));\n    }\n  };\n\n  useLayoutEffect(() => {\n    document.onfullscreenchange = () => {\n      setIsFullscreen(document.fullscreenElement !== null);\n\n      return () => {\n        document.onfullscreenchange = null;\n      };\n    };\n  });\n\n  return [isFullscreen, setFullscreen];\n};\n\nexport default useFullscreen;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { TStatistics, TStatisticsHeader } from '../../AppConstants';\nimport { TState } from '../../redux/types';\n\ntype Props = {\n  statistics: TStatistics;\n};\n\nconst Statistics: React.FC<Props> = ({ statistics }: Props) => {\n  const headers: TStatisticsHeader[] = ['date', 'mode', 'side', 'winner'];\n\n  return (\n    <div className=\"statistics\">\n      <NavLink className=\"btn btn--back\" to=\"/\">\n        Back\n      </NavLink>\n      <table className=\"statistics__table\">\n        <thead>\n          <tr>\n            <th className=\"statistics__header\">№</th>\n            {headers.map((header, idx) => (\n              <th key={idx} className=\"statistics__header\">\n                {header}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {statistics.map((row, idx) => {\n            return (\n              <tr key={idx}>\n                <td className=\"statistics__number\">{idx + 1}</td>\n                {headers.map((header, i) => (\n                  <td key={i} className=\"statistics__cell\">\n                    {row[header].toString()}\n                  </td>\n                ))}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: TState) => {\n  return {\n    statistics: state.statistics,\n  };\n};\n\nexport default connect(mapStateToProps)(Statistics);\n","import React from 'react';\nimport {\n  BiUpArrow,\n  BiDownArrow,\n  BiLeftArrow,\n  BiRightArrow,\n} from 'react-icons/bi';\nimport { NavLink } from 'react-router-dom';\n\nconst HotKeys: React.FC = () => {\n  return (\n    <div className=\"hot-keys\">\n      <NavLink className=\"btn btn--back\" to=\"/\">\n        Back\n      </NavLink>\n      <ul className=\"hot-keys__list\">\n        <li className=\"hot-keys__item\">\n          <span>U</span>\n          <span>Undo move</span>\n        </li>\n        <li className=\"hot-keys__item\">\n          <span>S</span>\n          <span>Surrender</span>\n        </li>\n        <li className=\"hot-keys__item\">\n          <span>H</span>\n          <span>Hide last move</span>\n        </li>\n        <li className=\"hot-keys__item\">\n          <span>M</span>\n          <span>Hide possible moves</span>\n        </li>\n        <li className=\"hot-keys__item\">\n          <span>\n            <BiUpArrow />\n            <BiDownArrow />\n          </span>\n          <span>Set music volume</span>\n        </li>\n        <li className=\"hot-keys__item\">\n          <span>\n            <BiLeftArrow />\n            <BiRightArrow />\n          </span>\n          <span>Set sound volume</span>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default HotKeys;\n","import React, { useRef } from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Footer from './components/Footer';\nimport Home from './components/Home';\nimport Game from './components/Game';\nimport Settings from './components/Settings';\nimport useFullscreen from './hooks/useFullscreen';\nimport Statistics from './components/Statistics';\nimport { TDispatch, TState } from './redux/types';\nimport { setMusic, setSound } from './redux/chessActions';\nimport useHotkeys from './hooks/useHotkeys';\nimport HotKeys from './components/HotKeys';\n\ntype Props = {\n  music: number;\n  sound: number;\n  setMusic: (value: number) => void;\n  setSound: (value: number) => void;\n};\n\nconst App: React.FC<Props> = (props: Props) => {\n  const { music, sound } = props;\n\n  useHotkeys('ArrowUp', () => props.setMusic(Math.min(music + 0.1, 1)));\n  useHotkeys('ArrowDown', () => props.setMusic(Math.max(music - 0.1, 0)));\n  useHotkeys('ArrowRight', () => props.setSound(Math.min(sound + 0.1, 1)));\n  useHotkeys('ArrowLeft', () => props.setSound(Math.max(sound - 0.1, 0)));\n\n  const AppRef = useRef<HTMLDivElement>(null);\n  const fullscreen = useFullscreen(AppRef);\n\n  return (\n    <div className=\"App\" ref={AppRef}>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/game\" component={Game} />\n        <Route path=\"/statistics\" component={Statistics} />\n        <Route path=\"/settings\">\n          <Settings fullscreen={fullscreen} />\n        </Route>\n        <Route path=\"/hotkeys\" component={HotKeys} />\n      </Switch>\n      <Footer />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: TState) => {\n  return {\n    music: state.music,\n    sound: state.sound,\n  };\n};\n\nconst mapDispatchToProps = (dispatch: TDispatch) => {\n  return {\n    setMusic: (value: number) => dispatch(setMusic(value)),\n    setSound: (value: number) => dispatch(setSound(value)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/move.a7304208.wav\";","export default __webpack_public_path__ + \"static/media/music.69eab84e.mp3\";","import * as Chess from 'chess.js';\nimport { generateAIMove } from '../AI/sendMessage';\nimport {\n  DEFAULT_MODE,\n  DEFAULT_SIDE,\n  DEFAULT_VIEW,\n  TColor,\n  TMode,\n  TBoard,\n  TSide,\n  TView,\n  TStatistics,\n  TStatisticsField,\n} from '../AppConstants';\nimport { getRandomSide } from '../utils';\nimport moveSound from '../assets/audio/move.wav';\nimport music from '../assets/audio/music.mp3';\n\ntype TBoardProps = {\n  view: TView;\n  turn: TColor;\n  mode: TMode;\n  actualSide: TSide;\n};\n\nconst getStoredItem = (name: string): any => {\n  if (name === 'fen') {\n    return localStorage.getItem(`react-chess-${name}`);\n  }\n  if (name === 'statistics') {\n    const statisticsJSON = localStorage.getItem('react-chess-statistics');\n    return JSON.parse(statisticsJSON || '[]');\n  }\n  const settingsJSON = localStorage.getItem('react-chess-settings');\n  if (!settingsJSON) {\n    return null;\n  }\n  const settings = JSON.parse(settingsJSON);\n  return settings[name] || null;\n};\n\nconst storeItem = <U, T>(name: U, value: T): void => {\n  if (typeof name !== 'string') {\n    return;\n  }\n  if (name === 'fen' && typeof value === 'string') {\n    localStorage.setItem('react-chess-fen', value);\n    return;\n  }\n  if (name === 'statistics') {\n    localStorage.setItem('react-chess-statistics', JSON.stringify(value));\n    return;\n  }\n  const settingsJSON = localStorage.getItem('react-chess-settings') || '{}';\n  const settings = JSON.parse(settingsJSON);\n  const newSettings = { ...settings, [name]: value };\n  localStorage.setItem('react-chess-settings', JSON.stringify(newSettings));\n};\n\nconst startSettings = {\n  fen: getStoredItem('fen') || undefined,\n  view: (getStoredItem('view') || DEFAULT_VIEW) as TView,\n  mode: (getStoredItem('mode') || DEFAULT_MODE) as TMode,\n  side: (getStoredItem('side') || DEFAULT_SIDE) as TSide,\n  actualSide: getStoredItem('actualSide') as TColor,\n  statistics: (getStoredItem('statistics') || []) as TStatistics,\n};\n\nif (!startSettings.actualSide) {\n  const { side } = startSettings;\n  startSettings.actualSide = side === 'random' ? getRandomSide() : side;\n}\n\nconst audio = {\n  move: new Audio(moveSound),\n  music: new Audio(music),\n};\n\naudio.music.loop = true;\n\nconst isReversed = (props: TBoardProps): boolean => {\n  const { mode, view, turn, actualSide } = props;\n  if (mode !== 'with-AI' && view === 'auto-rotate' && turn !== 'w') {\n    return true;\n  }\n  if (mode === 'with-AI' && actualSide === 'b') {\n    return true;\n  }\n  return false;\n};\n\nconst chess = new (Chess as any)(startSettings.fen);\n\nconst saveToStatistics = (props: {\n  mode: TMode;\n  side: TColor | '-';\n  winner: TColor | '-';\n}): void => {\n  const statisticsField: TStatisticsField = {\n    ...props,\n    date: new Date().toLocaleString('ru-Ru', {\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n    }),\n  };\n\n  const statistics = getStoredItem('statistics');\n  statistics.unshift(statisticsField);\n  storeItem('statistics', statistics.slice(0, 10));\n};\n\nconst getBoard = (data: TBoardProps): TBoard => {\n  const board = chess.board().flat();\n  if (isReversed(data)) {\n    return board.reverse();\n  }\n  return board;\n};\n\nconst getResults = (props: { mode: TMode; actualSide: TColor }): string => {\n  const side = props.mode === 'with-AI' ? props.actualSide : '-';\n\n  if (chess.in_checkmate()) {\n    const winner = chess.turn() === 'w' ? 'b' : 'w';\n    saveToStatistics({ mode: props.mode, side, winner });\n\n    return `CHECKMATE: WINNER - ${winner === 'b' ? 'BLACK' : 'WHITE'}`;\n  }\n  if (chess.in_draw()) {\n    let reason = '50 MOVES RULE';\n    if (chess.in_stalemate()) {\n      reason = 'STALEMATE';\n    } else if (chess.in_threefold_repetition()) {\n      reason = 'THREEFOLD REPETITION';\n    } else if (chess.insufficient_material()) {\n      reason = 'INSUFFICIENT MATERIAL';\n    }\n    saveToStatistics({ mode: props.mode, side, winner: '-' });\n    return `DRAW - ${reason}`;\n  }\n\n  saveToStatistics({ mode: props.mode, side, winner: '-' });\n  return 'UNKNOWN REASON';\n};\n\n// make move after reload if ai turn\nif (window.location.pathname === '/game' && startSettings.mode === 'with-AI') {\n  if (chess.turn() !== startSettings.actualSide) {\n    generateAIMove(chess.fen());\n  }\n}\n\nexport {\n  chess,\n  startSettings,\n  audio,\n  storeItem,\n  getStoredItem,\n  isReversed,\n  getBoard,\n  getResults,\n  saveToStatistics,\n};\n","import { Move, ShortMove, Square } from 'chess.js';\nimport { generateAIMove } from '../AI/sendMessage';\nimport { getIndex, getPosition, getRandomSide } from '../utils';\nimport {\n  audio,\n  chess,\n  getBoard,\n  getResults,\n  getStoredItem,\n  isReversed,\n  startSettings,\n  storeItem,\n  saveToStatistics,\n} from './setup';\nimport {\n  SELECT_SQUARE,\n  MOVE_PIECE,\n  PROMOTE_PAWN,\n  START_GAME,\n  SET_VIEW,\n  SET_SIDE,\n  SET_MODE,\n  MAKE_AI_MOVE,\n  SURRENDER,\n  SET_SOUND,\n  SET_MUSIC,\n  UNDO,\n} from './chessActions/chessActionsTypes';\nimport {\n  DEFAULT_MODE,\n  DEFAULT_MUSIC,\n  DEFAULT_SIDE,\n  DEFAULT_SOUND,\n  DEFAULT_VIEW,\n  TColor,\n  TMode,\n  TPendingPromotion,\n  TSide,\n  TView,\n} from '../AppConstants';\nimport { TActions } from './chessActions/chessActions.types';\n\n// const promotion = 'rnb2bnr/pppPkppp/8/4p3/7q/8/PPPP1PPP/RNBQKBNR w KQ - 1 5';\n// const stalemate = '4k3/4P3/8/4K3/8/8/8/8 w - - 0 78';\n// const material = 'k7/8/n7/8/8/8/8/7K b - - 0 1';\n// const checkmate =\n//   'rnb1kbnr/pppp1ppp/8/4p1q1/5PP1/8/PPPPP2P/RNBQKBNR b KQkq - 1 3';\n\nconst initialState = {\n  board: getBoard({\n    view: startSettings.view,\n    turn: chess.turn(),\n    mode: startSettings.mode,\n    actualSide: startSettings.actualSide,\n  }),\n  selectedSquare: null as number | null,\n  promotion: null as TPendingPromotion,\n  turn: chess.turn(),\n  view: startSettings.view,\n  side: startSettings.side,\n  actualSide: startSettings.actualSide,\n  mode: startSettings.mode,\n  isGameOver: false,\n  result: null as string | null,\n  isSurrender: false,\n  music: DEFAULT_MUSIC,\n  sound: DEFAULT_SOUND,\n  statistics: startSettings.statistics,\n  lastMove: null as [number, number] | null,\n  posibleMoves: null as number[] | null,\n  capturedMoves: null as number[] | null,\n};\n\nconst chessReducer = (\n  state = initialState,\n  action: TActions\n): typeof initialState => {\n  switch (action.type) {\n    case START_GAME: {\n      chess.reset();\n      storeItem('fen', '');\n\n      const side: TSide = getStoredItem('side') || DEFAULT_SIDE;\n      const view: TView = getStoredItem('view') || DEFAULT_VIEW;\n      const mode: TMode = getStoredItem('mode') || DEFAULT_MODE;\n\n      const actualSide: TColor = side === 'random' ? getRandomSide() : side;\n      storeItem('actualSide', actualSide);\n\n      if (mode === 'with-AI' && actualSide === 'b') {\n        generateAIMove(chess.fen());\n      }\n\n      const boardProps = {\n        view: state.view,\n        turn: chess.turn(),\n        mode,\n        actualSide,\n      };\n\n      return {\n        ...state,\n        selectedSquare: null,\n        promotion: null,\n        turn: chess.turn(),\n        view,\n        side,\n        actualSide,\n        mode,\n        board: getBoard(boardProps),\n        isGameOver: false,\n        result: null,\n        isSurrender: false,\n        lastMove: null,\n        posibleMoves: null,\n        capturedMoves: null,\n      };\n    }\n\n    case SELECT_SQUARE: {\n      const { view, mode, actualSide, turn } = state;\n      const isReversedBoard = isReversed({ view, mode, actualSide, turn });\n      const moves = chess.moves({\n        square: getPosition(action.payload, isReversedBoard),\n        verbose: true,\n      });\n\n      const posibleMoves: number[] = [];\n      const capturedMoves: number[] = [];\n\n      moves.forEach((move: Move) => {\n        if (move.captured) {\n          capturedMoves.push(getIndex(move.to, isReversedBoard));\n        } else {\n          posibleMoves.push(getIndex(move.to, isReversedBoard));\n        }\n      });\n\n      return {\n        ...state,\n        selectedSquare: action.payload,\n        posibleMoves,\n        capturedMoves,\n      };\n    }\n\n    case MOVE_PIECE: {\n      const { selectedSquare, view, turn, mode, actualSide } = state;\n\n      if (!selectedSquare || selectedSquare === action.payload) {\n        return state;\n      }\n\n      let isReversedBoard = isReversed({ view, turn, mode, actualSide });\n      const from = getPosition(selectedSquare, isReversedBoard) as Square;\n      const to = getPosition(action.payload, isReversedBoard) as Square;\n\n      const promotions = chess\n        .moves({ square: from, verbose: true })\n        .filter((m: ShortMove) => m.promotion);\n\n      if (promotions.length > 0) {\n        audio.move.play().catch();\n        const { color } = promotions[0];\n        return {\n          ...state,\n          promotion: { from, to, color },\n        };\n      }\n\n      const isLegal = chess.move({ from, to });\n      if (!isLegal) {\n        return { ...state, selectedSquare: null };\n      }\n\n      storeItem('fen', chess.fen());\n      const isGameOver = chess.game_over();\n      if (state.sound) {\n        audio.move.play().catch();\n      }\n\n      if (!isGameOver && mode === 'with-AI' && chess.turn() !== actualSide) {\n        generateAIMove(chess.fen());\n      }\n\n      const boardProps = {\n        view: state.view,\n        turn: chess.turn(),\n        mode,\n        actualSide,\n      };\n\n      if (view === 'auto-rotate' && mode === 'two-players') {\n        isReversedBoard = !isReversedBoard;\n      }\n\n      return {\n        ...state,\n        selectedSquare: null,\n        turn: chess.turn(),\n        board: getBoard(boardProps),\n        isGameOver,\n        statistics: isGameOver ? getStoredItem('statistics') : state.statistics,\n        result: isGameOver ? getResults({ mode, actualSide }) : null,\n        lastMove: [\n          getIndex(from, isReversedBoard),\n          getIndex(to, isReversedBoard),\n        ],\n        posibleMoves: null,\n        capturedMoves: null,\n      };\n    }\n\n    case PROMOTE_PAWN: {\n      const { from, to, promotion } = action.payload as ShortMove;\n\n      chess.move({ from, to, promotion });\n      localStorage.setItem('react-chess-fen', chess.fen());\n      const isGameOver = chess.game_over();\n\n      const { mode, actualSide } = state;\n\n      if (!isGameOver && mode === 'with-AI' && chess.turn() !== actualSide) {\n        generateAIMove(chess.fen());\n      }\n\n      const boardProps = {\n        view: state.view,\n        turn: chess.turn(),\n        mode,\n        actualSide,\n      };\n\n      const isReversedBoard = isReversed(boardProps);\n\n      return {\n        ...state,\n        selectedSquare: null,\n        promotion: null,\n        turn: chess.turn(),\n        board: getBoard(boardProps),\n        isGameOver,\n        statistics: isGameOver ? getStoredItem('statistics') : state.statistics,\n        result: isGameOver ? getResults({ mode, actualSide }) : null,\n        lastMove: [\n          getIndex(from, isReversedBoard),\n          getIndex(to, isReversedBoard),\n        ],\n        posibleMoves: null,\n        capturedMoves: null,\n      };\n    }\n\n    case MAKE_AI_MOVE: {\n      if (state.isSurrender) {\n        return { ...state };\n      }\n\n      chess.move(action.payload as ShortMove);\n\n      chess.move(action.payload as ShortMove);\n      storeItem('fen', chess.fen());\n      if (state.sound) {\n        audio.move.play().catch();\n      }\n\n      const isGameOver = chess.game_over();\n      const { mode, actualSide, view } = state;\n\n      const boardProps = {\n        view,\n        mode,\n        actualSide,\n        turn: chess.turn(),\n      };\n\n      const { from, to } = action.payload;\n      let isReversedBoard = isReversed(boardProps);\n      if (view === 'auto-rotate' && mode === 'two-players') {\n        isReversedBoard = !isReversedBoard;\n      }\n\n      return {\n        ...state,\n        promotion: null,\n        turn: chess.turn(),\n        board: getBoard(boardProps),\n        isGameOver,\n        statistics: isGameOver ? getStoredItem('statistics') : state.statistics,\n        result: isGameOver ? getResults({ mode, actualSide }) : null,\n        lastMove: [\n          getIndex(from, isReversedBoard),\n          getIndex(to, isReversedBoard),\n        ],\n      };\n    }\n\n    case SURRENDER: {\n      let result = 'WINNER - ';\n      let winner = '' as TColor | '-';\n      if (state.mode === 'with-AI') {\n        winner = state.actualSide === 'w' ? 'b' : 'w';\n      } else {\n        winner = state.turn === 'w' ? 'b' : 'w';\n      }\n\n      if (winner === 'b') {\n        result += 'BLACK';\n      } else {\n        result += 'WHITE';\n      }\n\n      const side = state.mode === 'with-AI' ? state.actualSide : '-';\n      saveToStatistics({ mode: state.mode, side, winner });\n\n      return {\n        ...state,\n        isSurrender: true,\n        isGameOver: true,\n        result,\n        statistics: getStoredItem('statistics'),\n      };\n    }\n\n    case UNDO: {\n      const { mode, isGameOver, promotion, turn, actualSide, view } = state;\n      const history = chess.history({ verbose: true });\n      if (history.length < 1) {\n        return {\n          ...state,\n          lastMove: null,\n          posibleMoves: null,\n          capturedMoves: null,\n        };\n      }\n      if (isGameOver || promotion) {\n        return {\n          ...state,\n        };\n      }\n      if (mode === 'with-AI') {\n        if (history.length <= 2 && turn === actualSide) {\n          return { ...state };\n        }\n      }\n      const isLegal = chess.undo();\n      if (isLegal) {\n        audio.move.play().catch();\n      }\n\n      storeItem('fen', chess.fen());\n\n      const lastMove = history.length >= 2 ? history[history.length - 2] : null;\n\n      const isReversedBoard = isReversed({\n        mode,\n        view,\n        turn: chess.turn(),\n        actualSide,\n      });\n\n      const boardProps = {\n        view,\n        turn: chess.turn(),\n        mode,\n        actualSide,\n      };\n\n      return {\n        ...state,\n        board: getBoard(boardProps),\n        turn: chess.turn(),\n        lastMove: lastMove\n          ? [\n              getIndex(lastMove.from, isReversedBoard),\n              getIndex(lastMove.to, isReversedBoard),\n            ]\n          : null,\n      };\n    }\n\n    case SET_VIEW: {\n      storeItem('view', action.payload);\n      return {\n        ...state,\n        view: action.payload,\n      };\n    }\n\n    case SET_SIDE: {\n      storeItem('side', action.payload);\n      return {\n        ...state,\n        side: action.payload,\n      };\n    }\n\n    case SET_MODE: {\n      storeItem('mode', action.payload);\n      return {\n        ...state,\n        mode: action.payload,\n      };\n    }\n\n    case SET_SOUND: {\n      audio.move.volume = action.payload;\n      return {\n        ...state,\n        sound: action.payload,\n      };\n    }\n\n    case SET_MUSIC: {\n      const { music } = audio;\n      if (music.paused && action.payload) {\n        music.play().catch();\n      } else if (!action.payload) {\n        music.pause();\n      }\n      music.volume = action.payload;\n      return {\n        ...state,\n        music: action.payload,\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default chessReducer;\n","import { createStore } from 'redux';\nimport chessReducer from './chessReducer';\n\nconst store = createStore(chessReducer);\n\nexport default store;\n","import { Dispatch } from 'react';\nimport { makeAIMove } from '../redux/chessActions';\n\nconst handleMessage = (e: MessageEvent, dispatch: Dispatch<any>): void => {\n  if (e.data && e.data.includes('bestmove')) {\n    const move = e.data.split(' ')[1];\n    const from = move.slice(0, 2);\n    const to = move.slice(2, 4);\n    dispatch(makeAIMove({ from, to, promotion: move[4] }));\n  }\n};\n\nexport default handleMessage;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport stockfish from './AI';\nimport store from './redux/store';\nimport handleMessage from './AI/handleMessage';\n\nstockfish.onmessage = (e: MessageEvent) => handleMessage(e, store.dispatch);\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}